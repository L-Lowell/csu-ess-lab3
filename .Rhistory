last_14_days <- max(colorado_covid$date) - 14
recent_data <- colorado_covid %>%
filter(date > last_14_days)
cases_14_days <- recent_data %>%
group_by(county) %>%
summarize(total_new_cases = sum(new_cases, na.rm = TRUE),
population = first(population),
cases_per_100k = (total_new_cases / population) * 100000)
flextable(cases_14_days %>%
slice_max(cases_per_100k, n = 5)) %>%
set_caption(as_paragraph(
as_chunk("Top 5 Counties with Most Cases Per 100K in Last 14 Days")))
watchlist_count <- sum(cases_14_days$cases_per_100k > 100, na.rm = TRUE)
watchlist_count
tempdate <- lubridate::as_date("2021-12-31")
#mutate on colorado data set by the lubridated year, so filtered by year 2021
colorado <- colorado %>%
mutate(year = lubridate::year(date)) %>%  # Extract year
filter(year == 2021) %>%  # Keep only 2021 data
group_by(fips, county) %>%  # Group by fips and county
summarize(deaths_2021 = sum(new_deaths, na.rm = TRUE), .groups = "drop")  # Summarize new deaths
head (colorado)
colorado <- colorado %>%
left_join(population_data, by = "fips")
View(colorado)
head (colorado)
colomnnames(colorado)
colnames(colorado)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / POPESTIMATE2021) * 100)  # Calculate death ratio without filtering
ggplot(colorado) +
geom_col(aes(x = reorder(factor(fips), death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County (FIPS)",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
# Create a filtered dataset instead of modifying 'colorado' directly
high_impact <- colorado %>%
filter(death_ratio >= 20)
ggplot(colorado) +
geom_col(aes(x = reorder(factor(fips), death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County (FIPS)",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
ggplot(colorado %>% filter(death_ratio > 20)) +
geom_col(aes(x = reorder(factor(fips), death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County (FIPS)",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
ggplot(colorado %>% filter(death_ratio > .20)) +
geom_col(aes(x = reorder(factor(fips), death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County (FIPS)",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
ggplot(colorado %>% filter(death_ratio > 20)) +
geom_col(aes(x = reorder(county, death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +  # Convert to percentage format
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
ggplot(colorado %>% filter(death_ratio > .20)) +
geom_col(aes(x = reorder(county, death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +  # Convert to percentage format
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
ggplot(colorado %>% filter(death_ratio > 20)) +
geom_col(aes(x = reorder(county, death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
scale_y_continuous(labels = scales::label_percent(scale = 0.01)) +  # Correctly format as percentage
labs(title = "Counties Where COVID Was 20%+ of Deaths in 2021",
x = "County",
y = "COVID Death %") +
theme_dark() +
coord_flip()  # Flip coordinates for readability
library(tidyverse)
library(flextable)
library(zoo)
library(flextable)
set_flextable_defaults(htmltools = TRUE)
data_url <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
covid_data <- read_csv(data_url)
head(covid_data)
txt <- "2022-02-01"
class (txt)
date_example <- as.Date(txt)
class(date_example)
my.state <- "Colorado"
colorado <- covid_data %>%
filter(state == my.state) %>%
group_by(county) %>%
mutate(new_cases = cases - lag(cases),
new_deaths = deaths - lag(deaths)) %>%
ungroup()
set_flextable_defaults(
font.color = "black",
background.color = "white")
filter(colorado, date == date_example) %>%
slice_max(cases, n = 5) %>%
select(Date = date, County = county, Cases = cases) %>%
flextable() %>%
set_caption(as_paragraph(
as_chunk("Most Total Cases")))
filter(colorado, date == date_example) %>%
slice_max(cases, n = 5) %>%
select(Date = date, County = county, Cases = new_cases) %>%
flextable() %>%
set_caption(caption = "Most New Cases")
pop_data_url <- "https://www2.census.gov/programs-surveys/popest/datasets/2020-2021/counties/totals/co-est2021-alldata.csv"
population_data <- read_csv(pop_data_url)
colnames(population_data)
glimpse(population_data)
library(stringr)
population_data <- population_data %>%
mutate(
STATE = str_pad(STATE, 2, pad = "0"),
COUNTY = str_pad(COUNTY, 3, pad = "0")
)
population_data <- population_data %>%
mutate(fips = paste0(STATE, COUNTY))
head(population_data$fips)
pop_data_url <- "https://www2.census.gov/programs-surveys/popest/datasets/2020-2021/counties/totals/co-est2021-alldata.csv"
pop_data <- read_csv(pop_data_url)
head(pop_data)
population_data <- population_data %>%
mutate(
STATE = str_pad(STATE, 2, pad = "0"),
COUNTY = str_pad(COUNTY, 3, pad = "0"),
fips = paste0(STATE, COUNTY)
) %>%
glimpse()
population_data_filtered <- population_data %>%
filter(COUNTY != "000") %>%
select(fips, contains("NAME"), contains("2021"))
population_data_filtered <- population_data_filtered %>%
rename(county = CTYNAME, population = POPESTIMATE2021)
colnames(population_data_filtered)
head(population_data_filtered)
dim(population_data_filtered)
glimpse(population_data_filtered)
colorado_population <- population_data_filtered %>%
filter(str_detect(county, "County"))
population_range <- range(colorado_population$population, na.rm = TRUE)
population_range
colorado_covid <- covid_data %>%
filter(state == "Colorado") %>%
arrange(county, date) %>%
group_by(county) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup() %>%
filter(date == as.Date("2021-01-01")) %>%
left_join(colorado_population, by = "fips") %>%
mutate(county = coalesce(county.x, county.y)) %>%
select(-county.x, -county.y) %>%
mutate(per_capita_cases = ifelse(population > 0, (cases / population) * 100000, NA),
per_capita_new_cases = ifelse(population > 0, (new_cases / population) * 100000, NA))%>%
glimpse()
library(flextable)
flextable(colorado_covid %>%
filter(!is.na(per_capita_cases)) %>%
slice_max(per_capita_cases, n = 5) %>%
select(Date = date, County = county, Per_Capita_Cases = per_capita_cases)) %>%
set_caption(as_paragraph(
as_chunk("Top 5 Colorado Counties by Per Capita Cumulative Cases")))
colorado_covid %>%
filter(!is.na(per_capita_new_cases)) %>%
slice_max(per_capita_new_cases, n = 5) %>%
select(Date = date, County = county, Per_Capita_New_Cases = per_capita_new_cases)  %>%
flextable() %>%
set_caption(caption = "Top 5 Colorado Counties by Per Capita New Cases")
last_14_days <- max(colorado_covid$date) - 14
recent_data <- colorado_covid %>%
filter(date > last_14_days)
cases_14_days <- recent_data %>%
group_by(county) %>%
summarize(total_new_cases = sum(new_cases, na.rm = TRUE),
population = first(population),
cases_per_100k = (total_new_cases / population) * 100000)
flextable(cases_14_days %>%
slice_max(cases_per_100k, n = 5)) %>%
set_caption(as_paragraph(
as_chunk("Top 5 Counties with Most Cases Per 100K in Last 14 Days")))
watchlist_count <- sum(cases_14_days$cases_per_100k > 100, na.rm = TRUE)
watchlist_count
tempdate <- lubridate::as_date("2021-12-31")
#mutate on colorado data set by the lubridated year, so filtered by year 2021
colorado <- colorado %>%
mutate(year = lubridate::year(date)) %>%  # Extract year
filter(year == 2021) %>%  # Keep only 2021 data
group_by(fips, county) %>%  # Group by fips and county
summarize(deaths_2021 = sum(new_deaths, na.rm = TRUE), .groups = "drop")  # Summarize new deaths
head (colorado)
colorado <- colorado %>%
left_join(population_data, by = "fips")
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / POPESTIMATE2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(death_ratio >= 20)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / deaths2021) * 100)  # Calculate death ratio without filtering
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / DEATHS2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(death_ratio >= 20)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / DEATHS2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(death_ratio > 20)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / DEATHS2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(!is.na(death_ratio), death_ratio >= 20)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / DEATHS2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(death_ratio >= 20)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / DEATHS2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(death_ratio >= 20)
head(colorado)
table(colorado$death_ratio >= 20)
#mutate creating death ratio from deaths, deaths 2021.
colorado <- colorado %>%
mutate(death_ratio = (deaths_2021 / DEATHS2021) * 100)  # Calculate death ratio without filtering
high_impact <- colorado %>%
filter(death_ratio >= 20)
View(colorado)
print(high_impact)
ggplot(high_impact) +
geom_col(aes(x = reorder(county, death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
theme_dark()
ggplot(high_impact) +
geom_col(aes(x = death_ratior, y = eorder(county, death_ratio)), fill = "pink", width = 0.8) +
theme_dark()
ggplot(high_impact) +
geom_col(aes(x = reorder(county, death_ratio), y = death_ratio), fill = "pink", width = 0.8) +
theme_dark()
ggplot(high_impact) +
geom_col(aes(x = reorder(county, death_ratio), y = death_ratio), fill = "pink") +
theme_dark()
ggplot(high_impact) +
geom_col(aes(y = reorder(county, death_ratio), x = death_ratio), fill = "pink") +
theme_dark()
ggplot(high_impact) +
geom_col(aes(y = reorder(county, death_ratio), x = death_ratio), fill = "pink") +
theme_dark()
# Group by date and state, summarizing total cases per state per date
state_covid <- covid_data %>%
group_by(date, state) %>%
summarise(cases = sum(cases), .groups = "drop") %>%
# Keep only selected states
filter(state %in% c('New York', "Ohio", 'Colorado', "Alabama")) %>%
# Compute new daily cases
group_by(state) %>%
mutate(newCases = cases - lag(cases)) %>%
# Compute 7-day rolling average of new cases
mutate(roll = zoo::rollmean(newCases, k = 7, align = "right", fill = NA)) %>%
# Ungroup to prevent issues with further operations
ungroup()
%>%
# Group by date and state, summarizing total cases per state per date
state_covid <- covid_data %>%
group_by(date, state) %>%
summarise(cases = sum(cases), .groups = "drop") %>%
# Keep only selected states
filter(state %in% c('New York', "Ohio", 'Colorado', "Alabama")) %>%
# Compute new daily cases
group_by(state) %>%
mutate(newCases = cases - lag(cases)) %>%
# Compute 7-day rolling average of new cases
mutate(roll = zoo::rollmean(newCases, k = 7, align = "right", fill = NA)) %>%
# Ungroup to prevent issues with further operations
ungroup()%>%
glimpse()
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
covid_with_locations <- covid_data %>%
left_join(county_centroids, by = "fips") %>%
glimpse()
covid_with_locations <- covid_with_locations %>%
mutate(month = format(date, "%m"))
weighted_center <- covid_with_locations %>%
group_by(date) %>%
summarize(
total_cases = sum(cases, na.rm = TRUE),
LON_weighted = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
LAT_weighted = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE)
) %>%
mutate(month = format(date, "%m")) %>%
glimpse()
weighted_center <- covid_with_locations %>%
group_by(date) %>%
summarize(
total_cases = sum(cases, na.rm = TRUE),
LON_weighted = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
LAT_weighted = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE)) %>%
mutate(
month = factor(format(date, "%B"), levels = month.name, ordered = TRUE)) %>%
glimpse()
library(maps)
us_states <- map_data("state")
ggplot() +
geom_polygon(data = us_states, aes(x = long, y = lat, group = group),
fill = "gray85", color = "white") +
geom_point(data = weighted_center,
aes(x = LON_weighted, y = LAT_weighted, color = month, size = total_cases),
alpha = 0.7) +
scale_color_viridis_d(name = "Month", option = "plasma") +
labs(title = "Movement of COVID-19 Weighted Mean Center Over Time",
x = "Longitude", y = "Latitude",
caption = "Data Source: NYT COVID Dataset") +
theme_minimal()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = newCases), fill = "pink", col = NA) +  # Pink bars for daily new cases
geom_line(aes(y = roll), col = "darkred", size = 1) +  # Dark red line for 7-day rolling avg
theme_linedraw() +
facet_wrap(~state, nrow = 2, scales = "free_y") +  # Separate plots for each state
labs(title = "New Daily COVID-19 Cases (7-Day Avg)",
x = "Date",
y = "Case Count")
# Group population dataset by state and get total 2021 population
state_pop <- population_data %>%
group_by(STNAME) %>%
summarise(state_pop = sum(POPESTIMATE2021), .groups = "drop")
# Merge COVID data with population data
pp <- state_covid %>%
inner_join(state_pop, by = c("state" = "STNAME")) %>%
# Compute per capita new cases
mutate(perCap = newCases / state_pop) %>%
# Compute 7-day rolling average of per capita cases
group_by(state) %>%
mutate(roll = zoo::rollmean(perCap, k = 7, align = "right", fill = NA)) %>%
# Ungroup to prevent further group-based calculations
ungroup()
# Group population dataset by state and get total 2021 population
state_pop <- population_data %>%
group_by(STNAME) %>%
summarise(state_pop = sum(POPESTIMATE2021), .groups = "drop")
# Merge COVID data with population data
pp <- state_covid %>%
inner_join(state_pop, by = c("state" = "STNAME")) %>%
# Compute per capita new cases
mutate(perCap = newCases / state_pop) %>%
# Compute 7-day rolling average of per capita cases
group_by(state) %>%
mutate(roll = zoo::rollmean(perCap, k = 7, align = "right", fill = NA)) %>%
# Ungroup to prevent further group-based calculations
ungroup()
ggplot(pp, aes(x = date)) +
geom_line(aes(y = roll, col = state), size = 1) +  # Line graph with different colors per state
theme_linedraw() +
labs(title = "7-Day Rolling Avg of Per Capita COVID-19 Cases",
x = "Date",
y = "Cases Per Capita")
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = newCases), fill = "pink") +
geom_line(aes(y = roll), col = "darkred") +
theme_linedraw() +
facet_wrap(~state, nrow = 2, scales = "free_y") +
labs(title = "New Daily COVID-19 Cases (7-Day Avg)",
x = "Date",
y = "Case Count")
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
meta <- covid_data %>%
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(date) %>%
mutate(d = row_number())
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
meta <- covid_data %>%
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(date) %>%
mutate(d = row_number())%>%
glimpse()
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
meta <- covid_data %>%
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(date) %>%
mutate(d = row_number())%>%
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(date) %>%
mutate(d = row_number())
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),  # Total cases per day
.groups = "drop"
) %>%
# Arrange in chronological order
arrange(date) %>%
# Create a time index for visualization
mutate(d = row_number())
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
covid_with_locations <- covid_data %>%
left_join(county_centroids, by = "fips") %>%
glimpse()
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),  # Total cases per day
.groups = "drop"
) %>%
# Arrange in chronological order
arrange(date) %>%
# Create a time index for visualization
mutate(d = row_number())
meta <- covid_data %>%
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),  # Total cases per day
.groups = "drop"
) %>%
# Arrange in chronological order
arrange(date) %>%
# Create a time index for visualization
mutate(d = row_number())
ggplot(meta) +
borders("state", fill = "gray90", colour = "white") +  # Add US state borders
geom_point(aes(x = wmX_c, y = wmY_c, size = cases), color = "red", alpha = 0.25) +  # Epicenter points
theme_linedraw() +
labs(
size = "Cases",
x = "",
y = "",
title = "Weighted Center of COVID-19 Cases"
) +
theme(legend.position = "none")  # Remove legend for cleaner visualization
meta <- covid_data %>%
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(date) %>%
mutate(d = row_number())
ggplot(meta) +
borders("state", fill = "gray90", colour = "white") +  # Add US state borders
geom_point(aes(x = wmX_c, y = wmY_c, size = cases), color = "red", alpha = 0.25) +  # Epicenter points
theme_linedraw() +
labs(
size = "Cases",
x = "",
y = "",
title = "Weighted Center of COVID-19 Cases"
) +
theme(legend.position = "none")  # Remove legend for cleaner visualization
meta <- covid_data %>%
inner_join(county_centroids, by = "fips") %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
cases = sum(cases, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(date) %>%
mutate(d = row_number())
